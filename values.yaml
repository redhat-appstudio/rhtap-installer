# Default values for rhtap-installer.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
---
debug:
  container: false  # Creates a long running container to easily open a terminal for troubleshooting.
  script: false  # Prints commands before executing them.
openshift-gitops:
  enabled: true
  channel: gitops-1.12
  workload-namespaces:
    - default
  git-token: ${GITOPS__GIT_TOKEN}  # Token to create/push repositories.
  argoCD:
    # ArgoCD's application-controller resource limits.
    controller:
      resources:
        limits:
          cpu: "2"
          memory: 6Gi
        requests:
          cpu: "1"
          memory: 3Gi
openshift-pipelines:
  enabled: true
  channel: pipelines-1.14

# Private values
# You may want to override those variables in another file (e.g. values-private.yaml)
acs:
  central-endpoint: ${ACS__CENTRAL_ENDPOINT}
  api-token: ${ACS__API_TOKEN}
developer-hub:
  app-config:
    techdocs:
      builder: 'local'
      generator:
        runIn: 'local'
      publisher:
        type: 'local'
    auth:
      environment: production
      providers:
        github:
          production:
            clientId: ${GITHUB__APP__CLIENT_ID}
            clientSecret: ${GITHUB__APP__CLIENT_SECRET}
        gitlab:
          production:
            clientId: ${GITLAB__OAUTH__CLIENT_ID}
            clientSecret: ${GITLAB__OAUTH__CLIENT_SECRET}
    integrations:
      github:
        - host: github.com
          apps:
            - appId: ${GITHUB__APP__APP_ID}
              clientId: ${GITHUB__APP__CLIENT_ID}
              clientSecret: ${GITHUB__APP__CLIENT_SECRET}
              webhookUrl: GITHUB__APP__WEBHOOK_URL
              webhookSecret: ${GITHUB__APP__WEBHOOK_SECRET}
              privateKey: |
                ${GITHUB__APP__PRIVATE_KEY}
      gitlab:
        - host: gitlab.com
          token: ${GITLAB_TOKEN}
    catalog:
      locations:
        - type: url
          target: ${DEVELOPER_HUB__CATALOG__URL}
      rules:
        - allow:
            - Component
            - System
            - Group
            - Resource
            - Location
            - Template
            - API
  proxy:
    '/quay/api':
      target: 'https://quay.io'
      headers:
        X-Requested-With: 'XMLHttpRequest'
        # Uncomment the following line to access a private Quay Repository using a token
        # Authorization: 'Bearer QUAY_TOKEN'
      changeOrigin: true
      # Change to "false" in case of using self hosted quay instance with a self-signed certificate
      secure: true
  quay:
    # The UI url for Quay, used to generate the link to Quay
    uiUrl: 'https://quay.io'
  values:
    upstream:
      backstage:
        extraAppConfig:
          - filename: app-config.extra.yaml
            configMapRef: developer-hub-app-config-extra
    global:
      dynamic:
        includes:
          - dynamic-plugins.default.yaml
        plugins:
          # Installed plugins can be listed at:
          # https://DH_HOSTNAME/api/dynamic-plugins-info/loaded-plugins
          - disabled: false
            package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd
            pluginConfig:
              dynamicPlugins:
                frontend:
                  roadiehq.backstage-plugin-argo-cd:
                    mountPoints:
                      - mountPoint: entity.page.overview/cards
                        importName: EntityArgoCDOverviewCard
                        config:
                          layout:
                            gridColumnEnd:
                              lg: "span 8"
                              xs: "span 12"
                          if:
                            allOf:
                              - isArgocdAvailable
                      - mountPoint: entity.page.cd/cards
                        importName: EntityArgoCDHistoryCard
                        config:
                          layout:
                            gridColumn: "1 / -1"
                          if:
                            allOf:
                              - isArgocdAvailable
          - disabled: false
            package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
          - disabled: false
            package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic
          - disabled: false
            package: ./dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic
          - disabled: false
            package: ./dynamic-plugins/dist/backstage-plugin-techdocs
          - disabled: false
            package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
          - disabled: false
            package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
            pluginConfig:
              kubernetes:
                serviceLocatorMethod:
                  type: 'multiTenant'
                clusterLocatorMethods:
                  - clusters:
                      - authProvider: serviceAccount
                        name: rhdh-kubernetes-plugin
                        serviceAccountToken: <token>
                        skipTLSVerify: true
                        url: https://kubernetes.default.svc
                    type: config
                customResources:
                  - apiVersion: v1
                    group: route.openshift.io
                    plural: routes
                  - apiVersion: 'v1'
                    group: 'tekton.dev'
                    plural: 'pipelineruns'
                  - apiVersion: 'v1'
                    group: 'tekton.dev'
                    plural: 'taskruns'
          - disabled: false
            package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-quay
          - disabled: false
            package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-tekton
            pluginConfig:
              dynamicPlugins:
                frontend:
                  janus-idp.backstage-plugin-tekton:
                    mountPoints:
                      - config:
                          if:
                            allOf:
                              - isTektonCIAvailable
                          layout:
                            gridColumn: 1 / -1
                            gridRowStart: 1
                        importName: TektonCI
                        mountPoint: entity.page.ci/cards
          - disabled: false
            package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-topology
pipelines:
  pipelines-as-code:
    github:
      application-id: ${GITHUB__APP__APP_ID}
      private-key: |
        ${GITHUB__APP__PRIVATE_KEY}
      webhook-secret: ${GITHUB__APP__WEBHOOK_SECRET}
quay:
  # Authentication information to push images.
  dockerconfigjson: |-
    ${QUAY__DOCKERCONFIGJSON}
trusted-artifact-signer:
  enabled: true
  operator:
    channel: stable
  securesign:
    fulcio:
      certificate:
        commonName: fulcio.hostname
        organizationEmail: ${TAS__SECURESIGN__FULCIO__ORG_EMAIL}
        organizationName: ${TAS__SECURESIGN__FULCIO__ORG_NAME}
      config:
        OIDCIssuer:
          ClientID: ${TAS__SECURESIGN__FULCIO__OIDC__CLIENT_ID}
          IssuerURL: '${TAS__SECURESIGN__FULCIO__OIDC__URL}'
          Type: ${TAS__SECURESIGN__FULCIO__OIDC__TYPE}
trusted-application-pipeline:
  name: rhtap
  namespaces:
    - rhtap-app
trusted-profile-analyzer:
  tracing:
    enabled: false
  # Enables using cluster's TLS certificates for services communication, this is
  # required for TPA on OpenShift given it will rely on TLS for internal
  # communication.
  openshift:
    useServiceCa: true
  ingress:
    className: openshift-default
  # TPA's file storage (S3).
  minio:
    enabled: true
    # Minio's administrator (root) password
    rootPassword: ${TPA__MINIO__ROOT_PASSWORD}
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    persistence:
      # MinIO PVC size.
      size: 5Gi
  # Bitnami's Keycloak IAM.
  keycloak:
    enabled: true
    production: true
    # Rely on cluster's TLS for the Keycloak's ingress/routes, each endpoint is
    # "re-encrypted" (`reencrypt`) with cluster's SSL capabilities.
    proxy: reencrypt
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    auth:
      adminUser: admin
      # Keycloak's administrator (admin) password.
      adminPassword: ${TPA__KEYCLOAK__ADMIN_PASSWORD}
    tls:
      enabled: true
      existingSecret: sso-tls
      usePem: true
    service:
      annotations:
        # OpenShift's annotation to use the named Secret for SSL communication,
        # the Secret contains the certificate and key pair for Keycloak.
        service.beta.openshift.io/serving-cert-secret-name: sso-tls
    ingress:
      enabled: true
      ingressClassName: openshift-default
      servicePort: https
      annotations:
        # Following the same approach taken for Ingress routes on OpenShift,
        # making sure the endpoint is "re-encrypted" (`reencrypt`).
        route.openshift.io/termination: reencrypt
    # PostgreSQL database for TPA and GUAC.
    postgresql:
      auth:
        # PostgreSQL's administrator (postgres) password.
        postgresPassword: ${TPA__POSTGRES__POSTGRES_PASSWORD}
        # Additional user for TPA's database.
        username: trusted-profile-analyzer
        # TPA's database user password.
        password: ${TPA__POSTGRES__TPA_PASSWORD}
      primary:
        containerSecurityContext:
          enabled: false
        podSecurityContext:
          enabled: false
  # TPA's event-bus using Kafka.
  kafka:
    enabled: true
    kraft:
      clusterId: "3nA2qspzReOmcxqlkmITAA"
    controller:
      podSecurityContext:
        enabled: false
      containerSecurityContext:
        enabled: false
    provisioning:
      podSecurityContext:
        enabled: false
      containerSecurityContext:
        enabled: false
  # TPA's file storage configuration, points back to Minio, defined previously.
  storage:
    endpoint: http://tpa-infrastructure-minio:9000
    accessKey:
      valueFrom:
        secretKeyRef:
          name: tpa-infrastructure-minio
          key: root-user
    secretKey:
      valueFrom:
        secretKeyRef:
          name: tpa-infrastructure-minio
          key: root-password
  # TPA's event-bus configuration, points back to Kafka, defined previously.
  eventBus:
    type: kafka
    bootstrapServers: tpa-infrastructure-kafka:9092
    config:
      securityProtocol: SASL_PLAINTEXT
      username: "user1"
      password:
        valueFrom:
          secretKeyRef:
            name: tpa-infrastructure-kafka-user-passwords
            key: client-passwords
      mechanism: PLAIN
  # TPA's OIDC (OpenID Connect) configuration.
  oidc:
    clients:
      frontend: {}
      walker:
        clientSecret:
          # OIDC client secret for the Walker module.
          value: ${TPA__OIDC__WALKER_CLIENT_SECRET}
      testingUser:
        clientSecret:
          # OIDC client secret for the Testing User module.
          value: ${TPA__OIDC__TESTING_USER_CLIENT_SECRET}
      testingManager:
        clientSecret:
          # OIDC client secret for the Testing Manager module.
          value: ${TPA__OIDC__TESTING_MANAGER_CLIENT_SECRET}
  # TPA's modules configuration.
  modules:
    bombasticWalker:
      sources:
        redhat:
          url: https://access.redhat.com/security/data/sbom/beta/
          signingKeyUrl: https://access.redhat.com/security/data/97f5eac4.txt#77E79ABE93673533ED09EBE2DCE3823597F5EAC4
          acceptV3Signatures: true
          fixLicenses: true
          job:
            schedule: "0 * * * *"
    vexinationWalker:
      sources:
        redhat:
          url: https://www.redhat.com/.well-known/csaf/provider-metadata.json
          acceptV3Signatures: true
          ignoreDistributions:
            - https://access.redhat.com/security/data/csaf/v2/advisories/
          job:
            schedule: "0 * * * *"
  # TPA's GUAC (Graph for Understanding Artifact Composition) configuration.
  guac:
    database:
      name: guac
      host: tpa-infrastructure-postgresql
      sslMode: disable
      username: guac
      # GUAC administrator (guac) password.
      password: ${TPA__GUAC__PASSWORD}
    initDatabase:
      name: postgres
      host: tpa-infrastructure-postgresql
      username: postgres
      sslMode: disable
      password:
        valueFrom:
          secretKeyRef:
            name: tpa-infrastructure-postgresql
            key: postgres-password

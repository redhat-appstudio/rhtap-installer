---
# Source: rhtap/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: helm-manager
  namespace: rhtap
---
# Source: rhtap/charts/developer-hub/charts/upstream/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: installer-postgresql
  namespace: "rhtap"
  labels:
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.10.0
type: Opaque
data:
  postgres-password: "#masked#"
  password: "#masked#"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: rhtap/charts/developer-hub/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: installer-developer-hub-auth
  namespace: "rhtap"
  labels:
    app.kubernetes.io/name: developer-hub
    helm.sh/chart: developer-hub-1.0.0-1
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "1.0-200"
    app.kubernetes.io/component: backstage
  annotations:
type: Opaque
data:
  backend-secret: "#masked#"
---
# Source: rhtap/charts/developer-hub/charts/upstream/templates/app-config-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: installer-developer-hub-app-config
data:
  app-config.yaml: |
    app:
      baseUrl: https://installer-developer-hub-rhtap.apps.example.com
    backend:
      auth:
        keys:
        - secret: ${BACKEND_SECRET}
      baseUrl: https://installer-developer-hub-rhtap.apps.example.com
      cors:
        origin: https://installer-developer-hub-rhtap.apps.example.com
      database:
        connection:
          password: ${POSTGRESQL_ADMIN_PASSWORD}
          user: postgres
---
# Source: rhtap/charts/developer-hub/templates/dynamic-plugins-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dynamic-plugins
data:
  dynamic-plugins.yaml: |
    includes:
    - dynamic-plugins.default.yaml
    plugins:
    - disabled: false
      package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd
      pluginConfig:
        dynamicPlugins:
          frontend:
            roadiehq.backstage-plugin-argo-cd:
              mountPoints:
              - config:
                  if:
                    allOf:
                    - isArgocdAvailable
                  layout:
                    gridColumnEnd:
                      lg: span 8
                      xs: span 12
                importName: EntityArgoCDOverviewCard
                mountPoint: entity.page.overview/cards
              - config:
                  if:
                    allOf:
                    - isArgocdAvailable
                  layout:
                    gridColumn: 1 / -1
                importName: EntityArgoCDHistoryCard
                mountPoint: entity.page.cd/cards
    - disabled: false
      package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
    - disabled: false
      package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic
    - disabled: false
      package: ./dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic
    - disabled: false
      package: ./dynamic-plugins/dist/backstage-plugin-techdocs
---
# Source: rhtap/templates/serviceaccount.yaml
# The ServiceAccount needs to be able to manage resources that
# might not be declated until after Subscriptions have been
# deployed (e.g. TektonConfig).
#
# If the ServiceAccount did not have admin privilegers, it
# would need the permission to edit roles. An attacker
# getting access to this ServiceAccount would be able
# to grant any role to any account.
# Therefore the attack surface is not increased by giving
# the admin role to the ServiceAccount.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: helm-manager-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: helm-manager
    namespace: rhtap
---
# Source: rhtap/charts/developer-hub/charts/upstream/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: installer-postgresql-hl
  namespace: "rhtap"
  labels:
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.10.0
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: installer
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: rhtap/charts/developer-hub/charts/upstream/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: installer-postgresql
  namespace: "rhtap"
  labels:
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.10.0
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: installer
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: rhtap/charts/developer-hub/charts/upstream/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: installer-developer-hub
  namespace: "rhtap" 
  labels:
    app.kubernetes.io/name: developer-hub
    helm.sh/chart: upstream-1.8.0
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backstage
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http-backend
      port: 7007
      targetPort: backend
      protocol: TCP
      nodePort: null  
  selector:
    app.kubernetes.io/name: developer-hub
    app.kubernetes.io/instance: installer
    app.kubernetes.io/component: backstage
---
# Source: rhtap/charts/developer-hub/charts/upstream/templates/backstage-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: installer-developer-hub
  namespace: "rhtap"
  labels: 
    app.kubernetes.io/name: developer-hub
    helm.sh/chart: upstream-1.8.0
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backstage
  annotations:
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: developer-hub
      app.kubernetes.io/instance: installer
      app.kubernetes.io/component: backstage
  template:
    metadata:
      labels:
        app.kubernetes.io/name: developer-hub
        helm.sh/chart: upstream-1.8.0
        app.kubernetes.io/instance: installer
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: backstage
      annotations:
        checksum/app-config: 6b26747d5021d4fb38189114dfc815a692e5074ec940c10981f622fe87475502
        checksum/dynamic-plugins: '80c632d264227f09a3e292e11657e61fb658e216ea915747c3a0ee720dcb07fa'
    spec:
      serviceAccountName: default
      volumes:
        - ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes:
                - ReadWriteOnce
                resources:
                  requests:
                    storage: 1Gi
          name: dynamic-plugins-root
        - configMap:
            defaultMode: 420
            name: dynamic-plugins
            optional: true
          name: dynamic-plugins
        - name: dynamic-plugins-npmrc
          secret:
            defaultMode: 420
            optional: true
            secretName: dynamic-plugins-npmrc
        - name: backstage-app-config
          configMap:
            name: installer-developer-hub-app-config
      
      imagePullSecrets:
        - name: rhdh-pull-secret
      initContainers:
        - command:
          - ./install-dynamic-plugins.sh
          - /dynamic-plugins-root
          env:
          - name: NPM_CONFIG_USERCONFIG
            value: /opt/app-root/src/.npmrc.dynamic-plugins
          image: 'registry.redhat.io/rhdh/rhdh-hub-rhel9:1.0-200'
          imagePullPolicy: Always
          name: install-dynamic-plugins
          volumeMounts:
          - mountPath: /dynamic-plugins-root
            name: dynamic-plugins-root
          - mountPath: /opt/app-root/src/dynamic-plugins.yaml
            name: dynamic-plugins
            readOnly: true
            subPath: dynamic-plugins.yaml
          - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
            name: dynamic-plugins-npmrc
            readOnly: true
            subPath: .npmrc
          workingDir: /opt/app-root/src
      containers:
        - name: backstage-backend
          image: registry.redhat.io/rhdh/rhdh-hub-rhel9:1.0-200
          imagePullPolicy: "Always"
          args:
            - "--config"
            - "dynamic-plugins-root/app-config.dynamic-plugins.yaml"
            - "--config"
            - "/opt/app-root/src/app-config-from-configmap.yaml"
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthcheck
              port: 7007
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 2
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthcheck
              port: 7007
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          env:
            - name: APP_CONFIG_backend_listen_port
              value: "7007"
            - name: POSTGRES_HOST
              value: installer-postgresql
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USER
              value: bn_backstage
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: installer-postgresql
                  key: password
            - name: BACKEND_SECRET
              valueFrom:
                secretKeyRef:
                  key: backend-secret
                  name: 'installer-developer-hub-auth'
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: 'installer-postgresql'
          ports:
            - name: backend
              containerPort: 7007
              protocol: TCP
          volumeMounts:
            - name: backstage-app-config
              mountPath: "/opt/app-root/src/app-config-from-configmap.yaml"
              subPath: app-config.yaml
            - mountPath: /opt/app-root/src/dynamic-plugins-root
              name: dynamic-plugins-root
---
# Source: rhtap/charts/developer-hub/charts/upstream/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: installer-postgresql
  namespace: "rhtap"
  labels:
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.10.0
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: installer-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: installer
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: installer-postgresql
      labels:
        app.kubernetes.io/instance: installer
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: postgresql-12.10.0
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: installer
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: registry.redhat.io/rhel9/postgresql-15:latest
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/var/lib/pgsql/data"
            - name: PGDATA
              value: "/var/lib/pgsql/data/userdata"
            # Authentication
            - name: POSTGRES_USER
              value: "bn_backstage"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: installer-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: installer-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: 'installer-postgresql'
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "bn_backstage" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "bn_backstage" -h 127.0.0.1 -p 5432
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /var/lib/pgsql/data
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
---
# Source: rhtap/charts/developer-hub/templates/route.yaml
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: installer-developer-hub
  namespace: "rhtap"
  labels:
    app.kubernetes.io/name: developer-hub
    helm.sh/chart: developer-hub-1.0.0-1
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "1.0-200"
    app.kubernetes.io/component: backstage
spec:
  host: 
  path: /
  port:
    targetPort: http-backend
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: installer-developer-hub
    weight: 100
  wildcardPolicy: None
---
# Source: rhtap/templates/openshift-gitops/subscription.yaml
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: openshift-gitops-operator
  namespace: openshift-operators
spec:
  channel: gitops-1.11
  installPlanApproval: Automatic
  name: openshift-gitops-operator
  source: redhat-operators
  sourceNamespace: openshift-marketplace
---
# Source: rhtap/templates/openshift-pipelines/subscription.yaml
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: openshift-pipelines-operator
  namespace: openshift-operators
spec:
  channel: pipelines-1.13
  installPlanApproval: Automatic
  name: openshift-pipelines-operator-rh
  source: redhat-operators
  sourceNamespace: openshift-marketplace
---
# Source: rhtap/charts/developer-hub/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "installer-developer-hub-test-connection"
  labels:
    app.kubernetes.io/name: developer-hub
    helm.sh/chart: developer-hub-1.0.0-1
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "1.0-200"
    app.kubernetes.io/component: backstage
  annotations:
      helm.sh/hook: test
spec:
  containers:
    - name: curl
      image: registry.redhat.io/ubi9:latest
      command: ["/bin/sh", "-c"]
      args:
        - |
          curl --connect-timeout 5 --max-time 20 --retry 20 --retry-delay 10 --retry-max-time 60 --retry-all-errors installer-developer-hub:7007
  restartPolicy: Never
---
# Source: rhtap/templates/configure.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "rhtap-installer-configure"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "installer"
    app.kubernetes.io/version: 2.1.0
    helm.sh/chart: "rhtap-0.6.4"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: "installer-configure"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "installer"
        helm.sh/chart: "rhtap-0.6.4"
    spec:
      containers:
      
                
        - name: configure-acs
          image: "quay.io/codeready-toolchain/oc-client-base:latest"
          command:
            - /bin/bash
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
            
        
                    
              echo -n "* Waiting for openshift-pipelines: "
              while ! kubectl get namespace openshift-pipelines --ignore-not-found > /dev/null; do
                echo -n "."
                sleep 2
              done
              echo "OK"
              
              CRDS=( pipelines tasks )
              for CRD in "${CRDS[@]}"; do
                echo -n "* Waiting for '$CRD' CRD: "
                while [ $(kubectl api-resources | grep -c "^$CRD ") = "0" ] ; do
                  echo -n "."
                  sleep 2
                done
                echo "OK"
              done
              
              echo -n "* Waiting for openshift-pipelines webhook service: "
              while true; do
                # Try instanciating a task
                cat << EOF | kubectl apply -f - --dry-run=server >/dev/null 2>&1 && break
              apiVersion: tekton.dev/v1
              kind: Task
              metadata:
                name: deleteme-task
              spec:
                description: >-
                  Test task to validate that Tekton is installed.
                steps:
                  - image: "k8s.gcr.io/hyperkube:v1.12.1"
                    name: setup
                    script: |
                      #!/usr/bin/env bash
                      echo "OK"
                    workingDir: /tmp
              EOF
                echo -n "."
                sleep 2
              done
              echo "OK"
              
        
              echo -n "* Configuring Tasks: "
              cat << EOF | kubectl apply -f - >/dev/null
                      
                apiVersion: tekton.dev/v1
                kind: Task
                metadata:
                  name: acs-deploy-check
                spec:
                  description: >-
                    Policy check a deployment with StackRox/RHACS This tasks allows you to check
                    a deployment against build-time policies and apply enforcement to fail
                    builds. It's a companion to the stackrox-image-scan task, which returns full
                    vulnerability scan results for an image.
                  params:
                    - default:  "${ACS__CENTRAL_ENDPOINT}"
                      description: |
                        Secret containing the address:port tuple for StackRox Central
                        (example - rox.stackrox.io:443)
                      name: rox_central_endpoint
                      type: string
                    - default: "${ACS__API_TOKEN}"
                      description: |
                        Secret containing the StackRox API token with CI permissions
                      name: rox_api_token
                      type: string
                    - description: |
                        URL to the deployment
                        (example - https://raw.gitlab.mycompany.com/myorg/myapp/mybranch/argocd/mycomponent/myenv/deployment.yaml)
                      name: deployment_url
                      type: string
                    - default: 'false'
                      description: |
                        When set to \`"true"\`, skip verifying the TLS certs of the Central
                        endpoint.  Defaults to \`"false"\`.
                      name: insecure-skip-tls-verify
                      type: string
                  results:
                    - description: Output of \`roxctl deployment check\`
                      name: check_output
                  steps:
                    - env:
                      - name: ROX_API_TOKEN
                        value: \$(params.rox_api_token)
                      - name: ROX_ENDPOINT
                        value: \$(params.rox_central_endpoint)
                      image: registry.access.redhat.com/ubi8/ubi-minimal
                      name: rox-deploy-scan
                      script: |
                        #!/usr/bin/env bash
                        set -o errexit
                        set -o nounset
                        set -o pipefail
                
                        curl -s -k -L -H "Authorization: Bearer \$ROX_API_TOKEN" \
                          "https://\$ROX_ENDPOINT/api/cli/download/roxctl-linux" \
                          --output ./roxctl  \
                          > /dev/null
                        chmod +x ./roxctl  > /dev/null
                
                        curl --fail --insecure --location --output deployment.yaml --silent "\$(params.deployment_url)"
                
                        ./roxctl deployment check \
                          \$(
                            [ "\$(params.insecure-skip-tls-verify)" = "true" ] && \
                            echo -n "--insecure-skip-tls-verify"
                          ) \
                          --file "deployment.yaml" \
                          --output json > check.log
                          cat check.log
                      workingDir: /tmp
                
              EOF
              echo -n "."
              cat << EOF | kubectl apply -f - >/dev/null
                      
                apiVersion: tekton.dev/v1
                kind: Task
                metadata:
                  name: acs-image-check
                spec:
                  description: |
                    Policy check an image with StackRox/RHACS This tasks allows you to
                    check an image against build-time policies and apply enforcement to fail builds.
                    It's a companion to the acs-image-scan task, which returns full vulnerability
                    scan results for an image.
                  params:
                  - default: "${ACS__CENTRAL_ENDPOINT}"
                    description: |
                      Secret containing the address:port tuple for StackRox Central
                      (example - rox.stackrox.io:443)
                    name: rox_central_endpoint
                    type: string
                  - default: "${ACS__API_TOKEN}"
                    description: |
                      Secret containing the StackRox API token with CI permissions
                    name: rox_api_token
                    type: string
                  - description: |
                      Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)
                    name: image
                    type: string
                  - default: "false"
                    description: |
                      When set to \`"true"\`, skip verifying the TLS certs of the Central
                      endpoint.  Defaults to \`"false"\`.
                    name: insecure-skip-tls-verify
                    type: string
                  - description: |
                      Digest of the image
                    name: image_digest
                    type: string
                  results:
                  - description: Output of \`roxctl image check\`
                    name: check_output
                  steps:
                  - env:
                    - name: ROX_API_TOKEN
                      value: \$(params.rox_api_token)
                    - name: ROX_ENDPOINT
                      value: \$(params.rox_central_endpoint)
                    image: registry.access.redhat.com/ubi8/ubi-minimal
                    name: rox-image-check
                    workingDir: /tmp
                    script: |
                      #!/usr/bin/env bash
                      set -o errexit
                      set -o nounset
                      set -o pipefail
                      set -x
                
                      # Install roxctl
                      curl --fail --insecure --location --silent \
                        --header "Authorization: Bearer \$ROX_API_TOKEN" \
                        --output ./roxctl  \
                        "https://\$ROX_ENDPOINT/api/cli/download/roxctl-linux" \
                        > /dev/null
                      chmod +x ./roxctl  > /dev/null
                
                      # Check image
                      IMAGE=\$(params.image)@\$(params.image_digest)
                      ./roxctl image scan --force \
                        \$(
                          [ "\$(params.insecure-skip-tls-verify)" = "true" ] && \
                          echo -n "--insecure-skip-tls-verify"
                        ) \
                        --image "\$IMAGE" \
                        --output json > check.log
                
                      cat check.log
                
              EOF
              echo -n "."
              cat << EOF | kubectl apply -f - >/dev/null
                      
                apiVersion: tekton.dev/v1
                kind: Task
                metadata:
                  name: acs-image-scan
                spec:
                  description: |
                    Retrun a full vulnerability scan results for an image.
                  params:
                  - default: "${ACS__CENTRAL_ENDPOINT}"
                    description: |
                      Secret containing the address:port tuple for StackRox Central
                      (example - rox.stackrox.io:443)
                    name: rox_central_endpoint
                    type: string
                  - default: "${ACS__API_TOKEN}"
                    description: |
                      Secret containing the StackRox API token with CI permissions
                    name: rox_api_token
                    type: string
                  - description: |
                      Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)
                    name: image
                    type: string
                  - default: "false"
                    description: |
                      When set to \`"true"\`, skip verifying the TLS certs of the Central
                      endpoint.  Defaults to \`"false"\`.
                    name: insecure-skip-tls-verify
                    type: string
                  - description: |
                      Digest of the image
                    name: image_digest
                    type: string
                  results:
                  - description: Output of \`roxctl image check\`
                    name: check_output
                  steps:
                  - env:
                    - name: ROX_API_TOKEN
                      value: \$(params.rox_api_token)
                    - name: ROX_ENDPOINT
                      value: \$(params.rox_central_endpoint)
                    image: registry.access.redhat.com/ubi8/ubi-minimal
                    name: rox-image-check
                    workingDir: /tmp
                    script: |
                      #!/usr/bin/env bash
                      set -o errexit
                      set -o nounset
                      set -o pipefail
                      set -x
                
                      # Install roxctl
                      curl --fail --insecure --location --silent \
                        --header "Authorization: Bearer \$ROX_API_TOKEN" \
                        --output ./roxctl  \
                        "https://\$ROX_ENDPOINT/api/cli/download/roxctl-linux" \
                        > /dev/null
                      chmod +x ./roxctl  > /dev/null
                
                      # Scan image
                      IMAGE=\$(params.image)@\$(params.image_digest)
                      ./roxctl image scan --force \
                        \$(
                          [ "\$(params.insecure-skip-tls-verify)" = "true" ] && \
                          echo -n "--insecure-skip-tls-verify"
                        ) \
                        --image "\$IMAGE" \
                        --output json > scan.log
                
                      cat scan.log
                
              EOF
              echo -n "."
              echo "OK"
        
              echo
              echo "Configuration successful"
        
                
        - name: configure-developer-hub
          image: "quay.io/codeready-toolchain/oc-client-base:latest"
          command:
            - /bin/bash
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
            
        
              YQ_VERSION="v4.40.5"
              curl --fail --location --output "/usr/bin/yq" --silent --show-error "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
              chmod +x "/usr/bin/yq"
        
              CHART="rhtap"
        
              echo -n "* Waiting for route: "
            
              PREFIX="installer-"
            
              until kubectl get route "${PREFIX}developer-hub" -o name >/dev/null ; do
                echo -n "."
                sleep 3
              done
              HOSTNAME="$(kubectl get routes "${PREFIX}developer-hub" -o jsonpath="{.spec.host}")"
              echo -n "."
              if [ "$(kubectl get secret "$CHART-developer-hub-secret" -o name --ignore-not-found | wc -l)" = "0" ]; then
                kubectl create secret generic "$CHART-developer-hub-secret" \
                  --from-literal="hostname=$HOSTNAME" >/dev/null
              fi
              echo "OK"
        
              echo -n "* Updating app-config.yaml: "
              kubectl get configmap ${PREFIX}developer-hub-app-config -o yaml > developer-hub-app-config.current.yaml
              yq '.data.["app-config.yaml"]' developer-hub-app-config.current.yaml > app-config.yaml
              touch app-config-update.yaml
              echo -n "."
        
              # Set the base URL
              URL="https://$HOSTNAME"
              yq -i ".app.baseUrl = \"$URL\" | .backend.baseUrl = \"$URL\" |.backend.cors.origin = \"$URL\"" app-config.yaml
              echo -n "."
        
            
              cat << _EOF_ >> app-config-update.yaml
              auth:
                environment: development
                providers:
                  github:
                    development:
                      clientId: ${GITHUB__APP__CLIENT_ID}
                      clientSecret: ${GITHUB__APP__CLIENT_SECRET}
              catalog:
                locations:
                - target: ${DEVELOPER_HUB__CATALOG__URL}
                  type: url
                rules:
                - allow:
                  - Component
                  - System
                  - Group
                  - Resource
                  - Location
                  - Template
                  - API
              integrations:
                github:
                - apps:
                  - appId: ${GITHUB__APP__APP_ID}
                    clientId: ${GITHUB__APP__CLIENT_ID}
                    clientSecret: ${GITHUB__APP__CLIENT_SECRET}
                    privateKey: |
                      ${GITHUB__APP__PRIVATE_KEY}
                    webhookSecret: ${GITHUB__APP__WEBHOOK_SECRET}
                    webhookUrl: GITHUB__APP__WEBHOOK_URL
                  host: github.com
              techdocs:
                builder: local
                generator:
                  runIn: local
                publisher:
                  type: local
              _EOF_
              echo -n "."
            
        
              # ArgoCD integration
              while [ "$(kubectl get secret "$CHART-argocd-secret" --ignore-not-found -o name | wc -l)" != "1" ]; do
                echo -ne "_"
                sleep 2
              done
              kubectl get secret "$CHART-argocd-secret" -o yaml > argocd_secret.yaml
              echo -n "."
        
              ARGOCD_API_TOKEN="$(yq '.data.api-token | @base64d' argocd_secret.yaml)"
              ARGOCD_HOSTNAME="$(yq '.data.hostname | @base64d' argocd_secret.yaml)"
              ARGOCD_PASSWORD="$(yq '.data.password | @base64d' argocd_secret.yaml)"
              ARGOCD_USER="$(yq '.data.user | @base64d' argocd_secret.yaml)"
              cat << _EOF_ >> app-config-update.yaml
              argocd:
                username: $ARGOCD_USER
                password: $ARGOCD_PASSWORD
                waitCycles: 25
                appLocatorMethods:
                  - type: 'config'
                    instances:
                      - name: default
                        url: https://$ARGOCD_HOSTNAME
                        token: $ARGOCD_API_TOKEN
              _EOF_
        
              # Tekton integration
              while [ "$(kubectl get secret "$CHART-pipelines-secret" --ignore-not-found -o name | wc -l)" != "1" ]; do
                echo -ne "_"
                sleep 2
              done
              PIPELINES_PAC_URL="$(kubectl get secret "$CHART-pipelines-secret" -o yaml | yq '.data.webhook-url | @base64d')"
              yq -i ".integrations.github[0].apps[0].webhookUrl = \"$PIPELINES_PAC_URL\"" app-config-update.yaml
              echo -n "."
        
              # Process app-config update
              yq -i '. *= load("app-config-update.yaml")' app-config.yaml
              yq ".data.[\"app-config.yaml\"] = \"$(cat app-config.yaml | sed 's:":\\":g')\"" developer-hub-app-config.current.yaml > developer-hub-app-config.new.yaml
              if [ "$(md5sum developer-hub-app-config.current.yaml | cut -d' ' -f1)" != "$(md5sum developer-hub-app-config.new.yaml | cut -d' ' -f1)" ]; then
                echo
                kubectl apply -f developer-hub-app-config.new.yaml
                echo "OK"
                echo -n "* Restarting Developer Hub: "
                kubectl delete pods -l "app.kubernetes.io/component=backstage"
              fi
              echo "OK"
        
              echo -n "* Waiting for UI: "
              until curl --fail --insecure --location --output /dev/null --silent "$URL"; do
                echo -n "."
                sleep 3
              done
              echo "OK"
        
              echo
              echo "Configuration successful"
        
                
        - name: configure-gitops
          image: "quay.io/codeready-toolchain/oc-client-base:latest"
          command:
            - /bin/sh
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
            
        
              echo -n "* Installing 'argocd' CLI: "
              curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
              chmod 555 argocd
              ./argocd version --client | head -1 | cut -d' ' -f2
        
              CRD="argocds"
              echo -n "* Waiting for '$CRD' CRD: "
              while [ $(kubectl api-resources | grep -c "^$CRD ") = "0" ] ; do
                echo -n "."
                sleep 3
              done
              echo "OK"
        
              #
              # All actions must be idempotent
              #
              CHART="rhtap"
              ARGOCD_NAMESPACE="openshift-gitops"
        
              echo -n "* Waiting for gitops operator deployment: "
              until kubectl get argocd -n "$ARGOCD_NAMESPACE" openshift-gitops --ignore-not-found >/dev/null; do
                echo -n "."
                sleep 3
              done
              echo "OK"
        
              echo -n "* Configure ArgoCD default instance: "
              # 'while' loop is necessary because sometimes the patch was failing
              # even though the resource was just verified to exist
              while ! kubectl patch argocd -n "$ARGOCD_NAMESPACE" "openshift-gitops" --type 'merge' --patch '        
                {
                  "spec": {
                    "server": {
                      "route":{
                        "tls": {
                          "insecureEdgeTerminationPolicy": "Redirect",
                          "termination": "reencrypt"
                        }
                      }
                    },
                    "extraConfig": {
                      "accounts.admin": "apiKey, login"
                    }
                  }
                }
                ' >/dev/null 2>&1; do
                echo -n "."
                sleep 3
              done
              echo "OK"
        
              echo -n "* ArgoCD dashboard: "
              test_cmd="kubectl get route -n "$ARGOCD_NAMESPACE" "openshift-gitops-server" --ignore-not-found -o jsonpath={.spec.host}"
              ARGOCD_HOSTNAME="$(${test_cmd})"
              until curl --fail --insecure --output /dev/null --silent "https://$ARGOCD_HOSTNAME"; do
                echo -n "."
                sleep 2
                ARGOCD_HOSTNAME="$(${test_cmd})"
              done
              echo "OK"
        
              echo -n " * ArgoCD admin user: "
              if [ "$(kubectl get secret "$CHART-argocd-secret" -o name --ignore-not-found | wc -l)" = "0" ]; then
                  ARGOCD_PASSWORD="$(kubectl get secret -n "$ARGOCD_NAMESPACE" "openshift-gitops-cluster" -o jsonpath="{.data.admin\.password}" | base64 --decode)"
                  ./argocd login "$ARGOCD_HOSTNAME" --grpc-web --insecure --username admin --password "$ARGOCD_PASSWORD" >/dev/null
                  echo -n "."
                  ARGOCD_API_TOKEN="$(./argocd account generate-token --account "admin")"
                  echo -n "."
                  kubectl create secret generic "$CHART-argocd-secret" \
                    --from-literal="api-token=$ARGOCD_API_TOKEN" \
                    --from-literal="hostname=$ARGOCD_HOSTNAME" \
                    --from-literal="password=$ARGOCD_PASSWORD" \
                    --from-literal="user=admin" \
                    > /dev/null
              fi
              echo "OK"
        
                    
              echo -n "* Waiting for openshift-pipelines: "
              while ! kubectl get namespace openshift-pipelines --ignore-not-found > /dev/null; do
                echo -n "."
                sleep 2
              done
              echo "OK"
              
              CRDS=( pipelines tasks )
              for CRD in "${CRDS[@]}"; do
                echo -n "* Waiting for '$CRD' CRD: "
                while [ $(kubectl api-resources | grep -c "^$CRD ") = "0" ] ; do
                  echo -n "."
                  sleep 2
                done
                echo "OK"
              done
              
              echo -n "* Waiting for openshift-pipelines webhook service: "
              while true; do
                # Try instanciating a task
                cat << EOF | kubectl apply -f - --dry-run=server >/dev/null 2>&1 && break
              apiVersion: tekton.dev/v1
              kind: Task
              metadata:
                name: deleteme-task
              spec:
                description: >-
                  Test task to validate that Tekton is installed.
                steps:
                  - image: "k8s.gcr.io/hyperkube:v1.12.1"
                    name: setup
                    script: |
                      #!/usr/bin/env bash
                      echo "OK"
                    workingDir: /tmp
              EOF
                echo -n "."
                sleep 2
              done
              echo "OK"
              
        
              echo -n "* Configuring Tasks: "
              cat << EOF | kubectl apply -f - >/dev/null
                    
              apiVersion: tekton.dev/v1
              kind: Task
              metadata:
                name: argocd-login-check
              spec:
                description: >-
                  Check the argocd login credentials.
                steps:
                  - env:
                    - name: ARGOCD_HOSTNAME
                      valueFrom:
                        secretKeyRef:
                          name: rhtap-argocd-secret
                          key: hostname
                    - name: ARGOCD_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: rhtap-argocd-secret
                          key: password
                    - name: ARGOCD_USER
                      valueFrom:
                        secretKeyRef:
                          name: rhtap-argocd-secret
                          key: user
                    image: registry.access.redhat.com/ubi9/ubi-minimal
                    name: check-argocd-login
                    script: |
                      #!/usr/bin/env bash
                      set -o errexit
                      set -o nounset
                      set -o pipefail
              
                      echo -n "* Installing 'argocd' CLI: "
                      curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                      chmod 555 argocd
                      ./argocd version --client | head -1 | cut -d' ' -f2
              
                      ./argocd login "\$ARGOCD_HOSTNAME" --grpc-web --insecure --username "\$ARGOCD_USER" --password "\$ARGOCD_PASSWORD"
                    workingDir: /tmp
              
              EOF
              echo "OK"
        
              echo
              echo "Configuration successful"
        
                
        - name: configure-namespace
          image: "quay.io/codeready-toolchain/oc-client-base:latest"
          command:
            - /bin/bash
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
            
        
                    
              echo -n "* Waiting for openshift-pipelines: "
              while ! kubectl get namespace openshift-pipelines --ignore-not-found > /dev/null; do
                echo -n "."
                sleep 2
              done
              echo "OK"
              
              CRDS=( pipelines tasks )
              for CRD in "${CRDS[@]}"; do
                echo -n "* Waiting for '$CRD' CRD: "
                while [ $(kubectl api-resources | grep -c "^$CRD ") = "0" ] ; do
                  echo -n "."
                  sleep 2
                done
                echo "OK"
              done
              
              echo -n "* Waiting for openshift-pipelines webhook service: "
              while true; do
                # Try instanciating a task
                cat << EOF | kubectl apply -f - --dry-run=server >/dev/null 2>&1 && break
              apiVersion: tekton.dev/v1
              kind: Task
              metadata:
                name: deleteme-task
              spec:
                description: >-
                  Test task to validate that Tekton is installed.
                steps:
                  - image: "k8s.gcr.io/hyperkube:v1.12.1"
                    name: setup
                    script: |
                      #!/usr/bin/env bash
                      echo "OK"
                    workingDir: /tmp
              EOF
                echo -n "."
                sleep 2
              done
              echo "OK"
              
        
              echo -n "* Configuring Tasks: "
              cat << EOF | kubectl apply -f - >/dev/null
                      
                apiVersion: tekton.dev/v1
                kind: Task
                metadata:
                  name: rhtap-dev-namespace-setup
                spec:
                  description: >-
                    Create the required resources for rhtap tasks to run in a namespace.
                  params:
                    - description: |
                        Secret containing the address:port tuple for StackRox Central
                        (example - rox.stackrox.io:443)
                      name: acs_central_endpoint
                      type: string
                    - description: |
                        Secret containing the StackRox API token with CI permissions
                      name: acs_api_token
                      type: string
                  steps:
                    - env:
                      - name: ROX_API_TOKEN
                        value: \$(params.acs_api_token)
                      - name: ROX_ENDPOINT
                        value: \$(params.acs_central_endpoint)
                      image: "k8s.gcr.io/hyperkube:v1.12.1"
                      name: setup
                      script: |
                        #!/usr/bin/env bash
                        set -o errexit
                        set -o nounset
                        set -o pipefail
                        
                        echo "Generating secret: "
                        kubectl create secret generic rhtap-secret \
                          --from-literal=rox_central_endpoint=\$ROX_ENDPOINT \
                          --from-literal=rox_api_token=\$ROX_API_TOKEN \
                          --dry-run -o yaml | kubectl apply -f - >/dev/null
                        echo "OK"
                
                        echo "Namespace is ready to execute rhtap pipelines"
                      workingDir: /tmp
                
              EOF
              echo -n "."
              cat << EOF | kubectl apply -f - >/dev/null
                      
                apiVersion: tekton.dev/v1
                kind: Task
                metadata:
                  name: rhtap-pe-info
                spec:
                  description: >-
                    Display the configuration information needed by the Platform
                    Engineer to configure the RHDH.
                  steps:
                    - env:
                      - name: ARGOCD_HOSTNAME
                        valueFrom:
                          secretKeyRef:
                            name: rhtap-argocd-secret
                            key: hostname
                      - name: ARGOCD_TOKEN
                        valueFrom:
                          secretKeyRef:
                            name: rhtap-argocd-secret
                            key: api-token
                      - name: DEVELOPER_HUB_HOSTNAME
                        valueFrom:
                          secretKeyRef:
                            name: rhtap-developer-hub-secret
                            key: hostname
                      - name: PIPELINES_PAC_GH_SECRET
                        valueFrom:
                          secretKeyRef:
                            name: rhtap-pipelines-secret
                            key: webhook-github-secret
                      - name: PIPELINES_PAC_URL
                        valueFrom:
                          secretKeyRef:
                            name: rhtap-pipelines-secret
                            key: webhook-url
                      image: "k8s.gcr.io/hyperkube:v1.12.1"
                      name: setup
                      script: |
                        #!/usr/bin/env bash
                        set -o errexit
                        set -o nounset
                        set -o pipefail
                
                        # Output information in YAML so that it can easily be
                        # post-processed if necessary.
                        cat << _EOF_
                        gitops:
                          api-token: \$ARGOCD_TOKEN
                          hostname: \$ARGOCD_HOSTNAME
                        developer-hub:
                          hostname: \$DEVELOPER_HUB_HOSTNAME
                        pipelines:
                          pipelines-as-code:
                            github:
                              # The docs URL explains how to setup the GitHub Application.
                              # Set dummy values for the homepage URL and webhook URL, and
                              # replace them with the final values after the chart is installed.
                              docs-url: https://pipelinesascode.com/docs/install/github_apps/
                              homepage-url: https://\$DEVELOPER_HUB_HOSTNAME
                              callback-url: https://\$DEVELOPER_HUB_HOSTNAME/api/auth/github/handler/frame
                              webhook-url: \$PIPELINES_PAC_URL
                              secret: \$PIPELINES_PAC_GH_SECRET
                        _EOF_
                      workingDir: /tmp
                
              EOF
              echo -n "."
              echo "OK"
        
              echo
              echo "Configuration successful"
        
                
        - name: configure-pipelines
          image: quay.io/redhat-appstudio/appstudio-utils:dbbdd82734232e6289e8fbae5b4c858481a7c057
          command:
            - /bin/bash
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
            
        
              CRD="tektonconfigs"
              echo -n "* Waiting for '$CRD' CRD: "
              while [ $(kubectl api-resources | grep -c "^$CRD ") = "0" ] ; do
                echo -n "."
                sleep 3
              done
              echo "OK"
        
              #
              # All actions MUST be idempotent
              #
              CHART="rhtap"
              PIPELINES_NAMESPACE="openshift-pipelines"
        
              echo -n "* Waiting for pipelines operator deployment: "
              until kubectl get namespace "$PIPELINES_NAMESPACE" >/dev/null 2>&1; do
                echo -n "."
                sleep 3
              done
              until kubectl get route -n "$PIPELINES_NAMESPACE" pipelines-as-code-controller >/dev/null 2>&1; do
                echo -n "."
                sleep 3
              done
              echo "OK"
        
              echo -n "* Update the TektonConfig resource: "
              until kubectl get tektonconfig config >/dev/null 2>&1; do
                echo -n "."
                sleep 3
              done
              kubectl patch tektonconfig config --type 'merge' --patch '        
                {
                  "spec": {
                    "pipeline": {
                      "enable-bundles-resolver": true,
                      "enable-cluster-resolver": true,
                      "enable-custom-tasks": true,
                      "enable-git-resolver": true,
                      "enable-hub-resolver": true,
                      "enable-tekton-oci-bundles": true
                    },
                    "chain": {
                      "artifacts.oci.storage": "oci",
                      "artifacts.pipelinerun.format": "in-toto",
                      "artifacts.pipelinerun.storage": "oci",
                      "artifacts.taskrun.format": "in-toto",
                      "artifacts.taskrun.storage": "oci",
                      "transparency.enabled": "true",
                      "transparency.url": "http://rekor-server.rekor.svc"
                    }
                  }
                }
                ' >/dev/null
              echo "OK"
        
              echo -n "* Configuring Chains secret: "
              SECRET="signing-secrets"
              if [ "$(kubectl get secret -n "$PIPELINES_NAMESPACE" "$SECRET" -o jsonpath='{.data}' --ignore-not-found --allow-missing-template-keys)" == "" ]; then
                # Delete secret/signing-secrets if already exists since by default cosign creates immutable secrets
                echo -n "."
                kubectl delete secrets  -n "$PIPELINES_NAMESPACE" "$SECRET" --ignore-not-found=true
        
                # To make this run conveniently without user input let's create a random password
                echo -n "."
                RANDOM_PASS=$( openssl rand -base64 30 )
        
                # Generate the key pair secret directly in the cluster.
                # The secret should be created as immutable.
                echo -n "."
                env COSIGN_PASSWORD=$RANDOM_PASS cosign generate-key-pair "k8s://$PIPELINES_NAMESPACE/$SECRET" >/dev/null
              fi
              # If the secret is not marked as immutable, make it so.
              if [ "$(kubectl get secret -n "$PIPELINES_NAMESPACE" "$SECRET" -o jsonpath='{.immutable}')" != "true" ]; then
                echo -n "."
                kubectl patch secret -n "$PIPELINES_NAMESPACE" "$SECRET" --dry-run=client -o yaml \
                  --patch='{"immutable": true}' \
                | kubectl apply -f - >/dev/null
              fi
              echo "OK"
        
            
              echo -n "* Configuring Pipelines-as-Code: "
              if [ "$(kubectl get secret "$CHART-pipelines-secret" -o name --ignore-not-found | wc -l)" = "0" ]; then
                echo -n "."
                WEBHOOK_SECRET="${GITHUB__APP__WEBHOOK_SECRET}"
                kubectl create secret generic "$CHART-pipelines-secret" \
                  --from-literal="webhook-github-secret=$WEBHOOK_SECRET" \
                  --from-literal="webhook-url=$(kubectl get routes -n "$PIPELINES_NAMESPACE" pipelines-as-code-controller -o jsonpath="https://{.spec.host}")" >/dev/null
              else
                WEBHOOK_SECRET="$(kubectl get secret "$CHART-pipelines-secret" ) -o jsonpath="{.data.webhook-github-secret}" | base64 -d"
              fi
              if [ "$(kubectl get secret -n "$PIPELINES_NAMESPACE" "pipelines-as-code-secret" -o name --ignore-not-found | wc -l)" = "0" ]; then
                echo -n "."
                kubectl -n "$PIPELINES_NAMESPACE" create secret generic pipelines-as-code-secret \
                  --from-literal github-application-id="${GITHUB__APP__APP_ID}" \
                  --from-literal github-private-key="$(echo "JHtHSVRIVUJfX0FQUF9fUFJJVkFURV9LRVl9Cg==" | base64 -d)" \
                  --from-literal webhook.secret="$WEBHOOK_SECRET" \
                  --dry-run=client -o yaml | kubectl apply -f - >/dev/null
              fi
              echo "OK"
            
        
              echo
              echo "Configuration successful"
        
      restartPolicy: Never
      serviceAccountName: helm-manager
---
# Source: rhtap/templates/test.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "rhtap-installer-test"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "installer"
    app.kubernetes.io/version: 2.1.0
    helm.sh/chart: "rhtap-0.6.4"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    helm.sh/hook: test
spec:
  template:
    metadata:
      name: "installer-test"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "installer"
        helm.sh/chart: "rhtap-0.6.4"
    spec:
      containers:
                
        - name: test-namespace
          image: "quay.io/codeready-toolchain/oc-client-base:latest"
          command:
            - /bin/bash
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
        
              pipeline_id="$(cat << EOF | kubectl create -f - | cut -d' ' -f 1
                      
                apiVersion: tekton.dev/v1
                kind: PipelineRun
                metadata:
                  generateName: rhtap-test-config-
                spec:
                  pipelineSpec:
                    tasks:
                    - name: acs-deploy-check
                      taskRef:
                        resolver: cluster
                        params:
                          - name: kind
                            value: task
                          - name: name
                            value: acs-deploy-check
                          - name: namespace
                            value: rhtap
                      params:
                        - name: deployment_url
                          value: https://raw.githubusercontent.com/jduimovich/quarkus-1/main/argocd/components/q/base/deployment.yaml
                        - name: insecure-skip-tls-verify
                          value: true
                    - name: acs-image-check
                      taskRef:
                        resolver: cluster
                        params:
                          - name: kind
                            value: task
                          - name: name
                            value: acs-image-check
                          - name: namespace
                            value: rhtap
                      params:
                        - name: image
                          value: quay.io/team-helium/miner
                        - name: image_digest
                          value: sha256:19bffd927a8dc70be5995eeba4ede675f57eca6222329477a50d65dc06880e3c
                        - name: insecure-skip-tls-verify
                          value: true
                    - name: acs-image-scan
                      taskRef:
                        resolver: cluster
                        params:
                          - name: kind
                            value: task
                          - name: name
                            value: acs-image-scan
                          - name: namespace
                            value: rhtap
                      params:
                        - name: image
                          value: quay.io/team-helium/miner
                        - name: image_digest
                          value: sha256:19bffd927a8dc70be5995eeba4ede675f57eca6222329477a50d65dc06880e3c
                        - name: insecure-skip-tls-verify
                          value: true
                    - name: argocd-login-check
                      taskRef:
                        resolver: cluster
                        params:
                          - name: kind
                            value: task
                          - name: name
                            value: argocd-login-check
                          - name: namespace
                            value: rhtap
                
              EOF
              )"
              echo -n "* Pipeline $pipeline_id: "
              while ! kubectl get "$pipeline_id" | grep --extended-regex --quiet " False | True "; do
                echo -n "."
                sleep 2
              done
              if kubectl get "$pipeline_id" | grep --quiet " True "; then
                kubectl delete "$pipeline_id" > /dev/null
                echo "OK"
              else
                echo "Failed"
                exit 1
              fi
        
      restartPolicy: Never
      serviceAccountName: helm-manager

# Default values for rhtap-installer.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
---
debug:
  ci: false # Sets up the products for CI testing.
  container: false # Creates a long running container to easily open a terminal for troubleshooting.
  script: false # Prints commands before executing them.
openshift-gitops:
  enabled: true
  channel: gitops-1.12
  workload-namespaces:
    - default
  git-token: |- # Token to create/push repositories.
    ${GITOPS__GIT_TOKEN}
  argoCD:
    # ArgoCD's application-controller resource limits.
    controller:
      resources:
        limits:
          cpu: "2"
          memory: 6Gi
        requests:
          cpu: "1"
          memory: 3Gi
openshift-pipelines:
  enabled: true
  channel: pipelines-1.14

# Private values
# You may want to override those variables in another file (e.g. values-private.yaml)
acs:
  central-endpoint: |-
    ${ACS__CENTRAL_ENDPOINT}
  api-token: |-
    ${ACS__API_TOKEN}
developer-hub:
  catalog:
    url: |-
      ${DEVELOPER_HUB__CATALOG__URL}
git:
  github:
    app:
      id: |-
        ${GITHUB__APP__ID}
      client:
        id: |-
          ${GITHUB__APP__CLIENT__ID}
        secret: |-
          ${GITHUB__APP__CLIENT__SECRET}
      webhook:
        secret: |-
          ${GITHUB__APP__WEBHOOK__SECRET}
      privateKey: |-
        ${GITHUB__APP__PRIVATE_KEY}
  gitlab:
    app:
      id: |-
        ${GITLAB__APP__CLIENT__ID}
      secret: |-
        ${GITLAB__APP__CLIENT__SECRET}
    token: |-
      ${GITLAB__TOKEN}
pipelines:
  pipelines-as-code:
    github:
      application-id: |-
        ${GITHUB__APP__ID}
      private-key: |-
        ${GITHUB__APP__PRIVATE_KEY}
      webhook-secret: |-
        ${GITHUB__APP__WEBHOOK__SECRET}
quay:
  # Authentication information to push images.
  dockerconfigjson: |-
    ${QUAY__DOCKERCONFIGJSON}
  # Authentication information to access images.
  token: |-
    ${QUAY__API_TOKEN}
trusted-artifact-signer:
  enabled: true
  operator:
    channel: stable-v1.0
  securesign:
    fulcio:
      certificate:
        commonName: fulcio.hostname
        organizationEmail: |-
          ${TAS__SECURESIGN__FULCIO__ORG_EMAIL}
        organizationName: |-
          ${TAS__SECURESIGN__FULCIO__ORG_NAME}
      config:
        OIDCIssuer:
          ClientID: |-
            ${TAS__SECURESIGN__FULCIO__OIDC__CLIENT_ID}
          IssuerURL: |-
            ${TAS__SECURESIGN__FULCIO__OIDC__URL}
          Type: |-
            ${TAS__SECURESIGN__FULCIO__OIDC__TYPE}'
trusted-application-pipeline:
  name: rhtap
  namespaces:
    - rhtap-app
trusted-profile-analyzer:
  authenticator: null
  bombastic:
    bucket: bombastic
    topics:
      failed: sbom-failed
      indexed: sbom-indexed
      stored: sbom-stored
  tracing:
    enabled: false
  # Enables using cluster's TLS certificates for services communication, this is
  # required for TPA on OpenShift given it will rely on TLS for internal
  # communication.
  openshift:
    useServiceCa: true
  ingress:
    className: openshift-default
  # TPA's file storage (S3).
  minio:
    enabled: true
    # Minio's administrator (root) password
    rootPassword: |-
      ${TPA__MINIO__ROOT_PASSWORD}
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    persistence:
      # MinIO PVC size.
      size: 5Gi
  # Bitnami's Keycloak IAM.
  keycloak:
    enabled: true
    production: true
    # Rely on cluster's TLS for the Keycloak's ingress/routes, each endpoint is
    # "re-encrypted" (`reencrypt`) with cluster's SSL capabilities.
    proxy: reencrypt
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    auth:
      adminUser: admin
      # Keycloak's administrator (admin) password.
      adminPassword: |-
        ${TPA__KEYCLOAK__ADMIN_PASSWORD}
    tls:
      enabled: true
      existingSecret: sso-tls
      usePem: true
    service:
      annotations:
        # OpenShift's annotation to use the named Secret for SSL communication,
        # the Secret contains the certificate and key pair for Keycloak.
        service.beta.openshift.io/serving-cert-secret-name: sso-tls
    ingress:
      enabled: true
      ingressClassName: openshift-default
      servicePort: https
      annotations:
        # Following the same approach taken for Ingress routes on OpenShift,
        # making sure the endpoint is "re-encrypted" (`reencrypt`).
        route.openshift.io/termination: reencrypt
    # PostgreSQL database for TPA and GUAC.
    postgresql:
      auth:
        # PostgreSQL's administrator (postgres) password.
        postgresPassword: |-
          ${TPA__POSTGRES__POSTGRES_PASSWORD}
        # Additional user for TPA's database.
        username: trusted-profile-analyzer
        # TPA's database user password.
        password: |-
          ${TPA__POSTGRES__TPA_PASSWORD}
      primary:
        containerSecurityContext:
          enabled: false
        podSecurityContext:
          enabled: false
  # TPA's event-bus using Kafka.
  kafka:
    enabled: true
    kraft:
      clusterId: "3nA2qspzReOmcxqlkmITAA"
    controller:
      podSecurityContext:
        enabled: false
      containerSecurityContext:
        enabled: false
    provisioning:
      podSecurityContext:
        enabled: false
      containerSecurityContext:
        enabled: false
  # TPA's file storage configuration, points back to Minio, defined previously.
  storage:
    endpoint: http://tpa-infrastructure-minio:9000
    accessKey:
      valueFrom:
        secretKeyRef:
          name: tpa-infrastructure-minio
          key: root-user
    secretKey:
      valueFrom:
        secretKeyRef:
          name: tpa-infrastructure-minio
          key: root-password
  # TPA's event-bus configuration, points back to Kafka, defined previously.
  eventBus:
    type: kafka
    bootstrapServers: tpa-infrastructure-kafka:9092
    config:
      securityProtocol: SASL_PLAINTEXT
      username: "user1"
      password:
        valueFrom:
          secretKeyRef:
            name: tpa-infrastructure-kafka-user-passwords
            key: client-passwords
      mechanism: PLAIN
  # TPA's OIDC (OpenID Connect) configuration.
  oidc:
    clients:
      frontend: {}
      walker:
        clientSecret:
          # OIDC client secret for the Walker module.
          value: |-
            ${TPA__OIDC__WALKER_CLIENT_SECRET}
      testingUser:
        clientSecret:
          # OIDC client secret for the Testing User module.
          value: |-
            ${TPA__OIDC__TESTING_USER_CLIENT_SECRET}
      testingManager:
        clientSecret:
          # OIDC client secret for the Testing Manager module.
          value: |-
            ${TPA__OIDC__TESTING_MANAGER_CLIENT_SECRET}
  # TPA's modules configuration.
  modules:
    bombasticWalker:
      sources:
        redhat:
          url: https://access.redhat.com/security/data/sbom/beta/
          signingKeyUrl: https://access.redhat.com/security/data/97f5eac4.txt#77E79ABE93673533ED09EBE2DCE3823597F5EAC4
          acceptV3Signatures: true
          fixLicenses: true
          job:
            schedule: "0 * * * *"
    vexinationWalker:
      sources:
        redhat:
          url: https://www.redhat.com/.well-known/csaf/provider-metadata.json
          acceptV3Signatures: true
          ignoreDistributions:
            - https://access.redhat.com/security/data/csaf/v2/advisories/
          job:
            schedule: "0 * * * *"
  # TPA's GUAC (Graph for Understanding Artifact Composition) configuration.
  guac:
    database:
      name: guac
      host: tpa-infrastructure-postgresql
      sslMode: disable
      username: guac
      # GUAC administrator (guac) password.
      password: |-
        ${TPA__GUAC__PASSWORD}
    initDatabase:
      name: postgres
      host: tpa-infrastructure-postgresql
      username: postgres
      sslMode: disable
      password:
        valueFrom:
          secretKeyRef:
            name: tpa-infrastructure-postgresql
            key: postgres-password
  v11y:
    bucket: v11y
    topics:
      failed: v11y-failed
      indexed: v11y-indexed
      stored: v11y-stored
  vexination:
    bucket: vexination
    topics:
      failed: vex-failed
      indexed: vex-indexed
      stored: vex-stored
